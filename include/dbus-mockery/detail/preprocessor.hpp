#pragma once

/// Namespace Utility
#define DBUS_MOCK_NAMESPACE_COLON_SEQ_EACH(r, data, i, elem) \
	BOOST_PP_IF(i, ::, BOOST_PP_EMPTY()) elem

#define DBUS_MOCK_NAMESPACE_COLON_DASH_SEQ_EACH(r, data, i, elem) \
	BOOST_PP_IF(i, ::, BOOST_PP_EMPTY()) BOOST_PP_CAT(elem, _)

#define DBUS_MOCK_NAMESPACE_COLON_SEQ(nspace) \
	BOOST_PP_SEQ_FOR_EACH_I(DBUS_MOCK_NAMESPACE_COLON_SEQ_EACH, ::, nspace)

#define DBUS_MOCK_NAMESPACE_COLON_SEQ_DASH(nspace) \
	BOOST_PP_SEQ_FOR_EACH_I(DBUS_MOCK_NAMESPACE_COLON_DASH_SEQ_EACH, ::, nspace)

#define DBUS_MOCK_EXPAND_NSPACE_RIGHT(nspace) \
	BOOST_PP_IF(BOOST_PP_SEQ_HEAD(nspace),, DBUS_MOCK_NAMESPACE_COLON_SEQ(BOOST_PP_SEQ_POP_FRONT(nspace))::)

#define DBUS_MOCK_EXPAND_NSPACE_LEFT(nspace) \
	BOOST_PP_IF(BOOST_PP_SEQ_HEAD(nspace),, ::DBUS_MOCK_NAMESPACE_COLON_SEQ(BOOST_PP_SEQ_POP_FRONT(nspace)))

#define DBUS_MOCK_EXPAND_NSPACE_LEFT_DASH(nspace) \
	BOOST_PP_IF(BOOST_PP_SEQ_HEAD(nspace),, ::DBUS_MOCK_NAMESPACE_COLON_SEQ_DASH(BOOST_PP_SEQ_POP_FRONT(nspace)))

#define DBUS_MOCK_EXPAND_NSPACE_RIGHT_DASH(nspace) \
	BOOST_PP_IF(BOOST_PP_SEQ_HEAD(nspace),, DBUS_MOCK_NAMESPACE_COLON_SEQ_DASH(BOOST_PP_SEQ_POP_FRONT(nspace))::)

#define DBUS_MOCK_EXPAND_NSPACE_INTERMEDIARY(nspace) \
	BOOST_PP_IF(BOOST_PP_SEQ_HEAD(nspace),, ::DBUS_MOCK_NAMESPACE_COLON_SEQ(BOOST_PP_SEQ_POP_FRONT(nspace))::)

#define DBUS_MOCK_EXPAND_NSPACE_INTERMEDIARY_DASH(nspace) \
	BOOST_PP_IF(BOOST_PP_SEQ_HEAD(nspace),::, ::DBUS_MOCK_NAMESPACE_COLON_SEQ_DASH(BOOST_PP_SEQ_POP_FRONT(nspace))::)

#define DBUS_MOCK_SEQUENCE_FACTORY_0(...) \
	 ((__VA_ARGS__)) DBUS_MOCK_SEQUENCE_FACTORY_1
#define DBUS_MOCK_SEQUENCE_FACTORY_1(...) \
	 ((__VA_ARGS__)) DBUS_MOCK_SEQUENCE_FACTORY_0
#define DBUS_MOCK_SEQUENCE_FACTORY_0_END
#define DBUS_MOCK_SEQUENCE_FACTORY_1_END
